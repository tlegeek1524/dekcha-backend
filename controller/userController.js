const { PrismaClient, Prisma } = require('@prisma/client');
const prisma = new PrismaClient();
const generateUid = require('../utils/generateUid');

const MAX_UID_ATTEMPTS = 5;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° uid ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
function sanitizeInput(input) {
  if (!input) return null;
  return String(input).trim() || null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
function isValidPictureUrl(url) {
  if (!url) return false;
  try {
    const urlObj = new URL(url);
    return urlObj.protocol === 'https:' &&
      (urlObj.hostname.includes('line-scdn.net') ||
        urlObj.hostname.includes('profile.line-scdn.net'));
  } catch {
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
async function createNewUser(userid, displayName, pictureUrl = null) {
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const cleanUserid = sanitizeInput(userid);
  const cleanName = sanitizeInput(displayName);
  const cleanPicture = isValidPictureUrl(pictureUrl) ? pictureUrl : null;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  if (!cleanUserid || !cleanName) {
    const error = new Error('userid ‡πÅ‡∏•‡∏∞ displayName ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô');
    error.status = 400;
    throw error;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID
  if (!/^U[a-f0-9]{32}$/i.test(cleanUserid)) {
    const error = new Error('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö LINE User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    error.status = 400;
    throw error;
  }

  // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏£‡∏ì‡∏µ UID ‡∏ã‡πâ‡∏≥
  for (let attempt = 1; attempt <= MAX_UID_ATTEMPTS; attempt++) {
    try {
      const uid = generateUid();

      const user = await prisma.user.create({
        data: {
          userid: cleanUserid,
          name: cleanName,
          pictureurl: cleanPicture,
          uid: uid,
          userpoint: 0,
          role: 'user',
          isactive: true,
          phonenumber: null
        },
      });

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${cleanName} (${cleanUserid})`);
      return user;

    } catch (error) {
      // ‡∏Å‡∏£‡∏ì‡∏µ UID ‡∏ã‡πâ‡∏≥
      if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {
        console.warn(`‚ö†Ô∏è UID ‡∏ã‡πâ‡∏≥ attempt ${attempt}/${MAX_UID_ATTEMPTS}`);

        if (attempt === MAX_UID_ATTEMPTS) {
          const err = new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á UID ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
          err.status = 500;
          throw err;
        }
        continue; // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ userid ‡∏ã‡πâ‡∏≥
      if (error instanceof Prisma.PrismaClientKnownRequestError &&
        error.code === 'P2002' &&
        error.meta?.target?.includes('userid')) {
        const err = new Error('‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß');
        err.status = 409;
        throw err;
      }

      throw error;
    }
  }
}

// POST /api/users - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User
exports.createUser = async (req, res) => {
  try {
    console.log('üìù Request Body:', req.body);

    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Frontend (‡∏ï‡∏≤‡∏° LINE Profile format)
    const { userId, displayName, pictureUrl } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!userId || !displayName) {
      return res.status(400).json({
        error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
        required: ['userId', 'displayName'],
        received: { userId: !!userId, displayName: !!displayName }
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let existingUser = await prisma.user.findFirst({
      where: { userid: userId }
    });

    let user;
    if (existingUser) {
      console.log(`üë§ ‡∏û‡∏ö User ‡πÄ‡∏î‡∏¥‡∏°: ${existingUser.name}`);
      user = existingUser;
    } else {
      console.log(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà: ${displayName}`);
      user = await createNewUser(userId, displayName, pictureUrl);
    }

    // ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Frontend ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    const response = {
      uid: user.uid,
      name: user.name,
      userpoint: user.userpoint,
      role: user.role,
      isactive: user.isactive,
      pictureurl: user.pictureurl,
      phonenumber: user.phonenumber,
      createdAt: user.createdAt,
      updatedAt: user.updatedAt
    };

    console.log('‚úÖ Response:', response);
    return res.status(200).json(response);

  } catch (error) {
    console.error('‚ùå createUser Error:', error);

    // ‡∏™‡πà‡∏á Error Response
    return res.status(error.status || 500).json({
      error: error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      timestamp: new Date().toISOString()
    });
  }
};


// GET /user/:identifier ‚Üí ‡∏î‡∏∂‡∏á user ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ query.name
exports.getUser = async (req, res) => {
  try {
    const { identifier } = req.params;
    if (!identifier) {
      return res.status(400).json({ error: 'Missing user identifier' });
    }

    let user = await prisma.user.findFirst({
      where: { OR: [{ uid: identifier }, { userid: identifier }] }
    });

    if (!user) {
      const nameFromQuery = req.query.name;
      if (!nameFromQuery) {
        return res.status(400).json({ error: 'Name is required for new user' });
      }
      user = await createNewUser(identifier, nameFromQuery, req.query.picture || null);
    }

    return res.status(200).json({
      uid: user.uid,
      userid: user.userid,
      displayName: user.name,
      pictureurl: user.pictureurl,
      role: user.role,
      userpoint: user.userpoint,
      phonenumber: user.phonenumber,
      isactive: user.isactive
    });
  } catch (error) {
    console.error('getUser error:', error);
    res.status(error.status || 500).json({ error: error.message || 'Internal server error' });
  }
};

// GET /users ‚Üí ‡∏î‡∏∂‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllUsers = async (req, res) => {
  try {
    const users = await prisma.user.findMany();
    res.status(200).json(users);
  } catch (error) {
    console.error('getAllUsers error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// PUT /user/phonenumber/:uid ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á user ‡∏ï‡∏≤‡∏° uid
exports.updatePhoneNumber = async (req, res) => {
  try {
    const { uid } = req.params;
    const { phonenumber } = req.body;

    if (!phonenumber) {
      return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const user = await prisma.user.findUnique({ where: { uid } });
    if (!user) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ phonenumber ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß) ‡∏´‡πâ‡∏≤‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ã‡πâ‡∏≥
    if (user.phonenumber) {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
      if (user.phonenumber === phonenumber) {
        return res.status(409).json({ message: '‡∏Ñ‡∏∏‡∏ì‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' });
      }
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô user ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const phoneExists = await prisma.user.findFirst({
      where: {
        phonenumber,
        NOT: { uid }
      }
    });
    if (phoneExists) {
      return res.status(409).json({ message: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    const updatedUser = await prisma.user.update({
      where: { uid },
      data: { phonenumber }
    });

    res.status(200).json({
      uid: updatedUser.uid,
      phonenumber: updatedUser.phonenumber,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
};
